name: 🚀 Auto Version After Merge PR (Hybrid)

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read

jobs:
  auto-version:
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && !contains(github.event.head_commit.message, '[skip version]') && !contains(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.11.0'
        registry-url: 'https://registry.npmjs.org'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🧪 Run tests
      run: npm test

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🔍 Analyze merged PR commits
      id: analyze-commits
      run: |
        echo "🔄 Analyzing merged PR commits..."
        
        # Récupérer le numéro de la PR depuis le message de merge
        PR_NUMBER=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'Merge pull request #\K\d+')
        echo "PR Number: $PR_NUMBER"
        
        if [ -z "$PR_NUMBER" ]; then
          echo "❌ Could not extract PR number from merge commit"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=🟢" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Récupérer les commits de la PR
        echo "📝 Fetching commits from PR #$PR_NUMBER..."
        
        # Utiliser l'API GitHub pour récupérer les commits de la PR
        PR_COMMITS=$(curl -s -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" | \
          jq -r '.[].commit.message')
        
        echo "Commits from PR:"
        echo "$PR_COMMITS"
        
        # Analyser les commits pour déterminer le type de bump
        if echo "$PR_COMMITS" | grep -qE "(^feat(\(.+\))?!:|^fix(\(.+\))?!:|^refactor(\(.+\))?!:|BREAKING CHANGE)"; then
          echo "🔴 MAJOR version bump detected (breaking changes)"
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "emoji=🔴" >> $GITHUB_OUTPUT
        elif echo "$PR_COMMITS" | grep -qE "(^feat(\(.+\))?:|feat:)"; then
          echo "🟡 MINOR version bump detected (new features)"
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "emoji=🟡" >> $GITHUB_OUTPUT
        elif echo "$PR_COMMITS" | grep -qE "(^fix(\(.+\))?:|^perf(\(.+\))?:|^revert(\(.+\))?:|fix:|perf:)"; then
          echo "🟢 PATCH version bump detected (bug fixes)"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=🟢" >> $GITHUB_OUTPUT
        else
          echo "🟢 Default PATCH version bump (no conventional commits found)"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=🟢" >> $GITHUB_OUTPUT
        fi

    - name: 📈 Update package version
      id: update-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Bump type: $BUMP_TYPE"
        
        # Mettre à jour la version dans package.json et package-lock.json
        npm version $BUMP_TYPE --no-git-tag-version
        
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Vérifier que package-lock.json a aussi été mis à jour
        LOCK_VERSION=$(node -p "require('./package-lock.json').version")
        echo "Package-lock version: $LOCK_VERSION"
        
        if [ "$NEW_VERSION" != "$LOCK_VERSION" ]; then
          echo "⚠️ Package-lock.json version mismatch, fixing..."
          npm install --package-lock-only
        fi

    - name: 🏷️ Create version commit and tag with token
      run: |
        NEW_VERSION="${{ steps.update-version.outputs.version }}"
        BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
        EMOJI="${{ steps.analyze-commits.outputs.emoji }}"
        
        # Configurer Git avec l'utilisateur actions
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Configurer l'URL avec le token pour contourner la protection
        git remote set-url origin https://x-access-token:${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # Ajouter les fichiers modifiés
        git add package.json package-lock.json
        
        # Créer le commit de version
        git commit -m "chore(release): bump version to $NEW_VERSION [skip version]

        $EMOJI Auto-generated version bump
        📈 Type: $BUMP_TYPE
        🏷️ Version: $NEW_VERSION
        🤖 Generated by GitHub Actions
        
        Files updated:
        - package.json: $NEW_VERSION
        - package-lock.json: $NEW_VERSION"
        
        # Créer le tag
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION

        $EMOJI $BUMP_TYPE release
        🏷️ Version: $NEW_VERSION
        🗓️ Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        🤖 Auto-generated by GitHub Actions"
        
        # Pousser les changements avec force si nécessaire
        echo "🚀 Pushing changes..."
        git push origin main || {
          echo "⚠️ Normal push failed, trying force push..."
          git push origin main --force-with-lease
        }
        
        echo "🏷️ Pushing tag..."
        git push origin "v$NEW_VERSION" || {
          echo "⚠️ Tag push failed, continuing..."
        }

    - name: 📋 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.update-version.outputs.version }}
        release_name: ${{ steps.analyze-commits.outputs.emoji }} Release v${{ steps.update-version.outputs.version }}
        body: |
          ## 🚀 Release v${{ steps.update-version.outputs.version }}
          
          ### 📊 Version Information
          - **Version**: `${{ steps.update-version.outputs.version }}`
          - **Type**: `${{ steps.analyze-commits.outputs.bump_type }}` release
          - **Generated**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔄 Triggered by
          Merge commit: `${{ github.event.head_commit.message }}`
          
          ### 📝 Changes
          This release was automatically generated after merging a pull request.
          Both `package.json` and `package-lock.json` have been updated to version `${{ steps.update-version.outputs.version }}`.
          
          ### 🛠️ Files Updated
          - ✅ `package.json` → `${{ steps.update-version.outputs.version }}`
          - ✅ `package-lock.json` → `${{ steps.update-version.outputs.version }}`
          
          See the [full changelog](https://github.com/${{ github.repository }}/compare/v${{ steps.update-version.outputs.version }}...v${{ steps.update-version.outputs.version }}) for details.
          
          ---
          
          🤖 **Auto-generated by GitHub Actions (Hybrid Method)**
        draft: false
        prerelease: false

    - name: 🎊 Success notification
      run: |
        echo "🎉 SUCCESS! Version automatically updated!"
        echo "📦 New version: ${{ steps.update-version.outputs.version }}"
        echo "📈 Bump type: ${{ steps.analyze-commits.outputs.bump_type }}"
        echo "🏷️ Tag created: v${{ steps.update-version.outputs.version }}"
        echo "📋 Release created: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.update-version.outputs.version }}"
        echo ""
        echo "✅ Files updated:"
        echo "  - package.json"
        echo "  - package-lock.json"
        echo ""
        echo "🔗 View changes: https://github.com/${{ github.repository }}/commits/main"
        echo ""
        echo "🔧 Method used: Hybrid (Git with token authentication)"
