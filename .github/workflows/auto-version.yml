name: 🚀 Auto Version Bump

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  # Create version bump PR
  version-bump:
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.11.0'
        registry-url: 'https://registry.npmjs.org'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🧪 Run tests
      run: npm test

    - name: 🔍 Run linting
      run: npm run lint

    - name: 📊 Determine version bump type
      id: version-bump-type
      run: |
        # Analyser le dernier commit pour déterminer le type de bump
        LAST_COMMIT_MSG=$(git log -1 --pretty=%s)
        echo "Last commit: $LAST_COMMIT_MSG"
        
        if echo "$LAST_COMMIT_MSG" | grep -qE "^feat(\(.+\))?!:|^fix(\(.+\))?!:|^refactor(\(.+\))?!:|BREAKING CHANGE"; then
          echo "🔴 MAJOR version bump detected"
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "emoji=🔴" >> $GITHUB_OUTPUT
        elif echo "$LAST_COMMIT_MSG" | grep -qE "^feat(\(.+\))?:"; then
          echo "🟡 MINOR version bump detected"
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "emoji=🟡" >> $GITHUB_OUTPUT
        elif echo "$LAST_COMMIT_MSG" | grep -qE "^fix(\(.+\))?:|^perf(\(.+\))?:|^revert(\(.+\))?:"; then
          echo "🟢 PATCH version bump detected"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=🟢" >> $GITHUB_OUTPUT
        else
          echo "🟢 Default PATCH version bump"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=🟢" >> $GITHUB_OUTPUT
        fi

    - name: 📈 Calculate new version
      id: new-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        BUMP_TYPE="${{ steps.version-bump-type.outputs.bump_type }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Bump type: $BUMP_TYPE"
        
        # Calculate new version using npm version (dry run)
        NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version --no-commit-hooks)
        NEW_VERSION=${NEW_VERSION#v} # Remove 'v' prefix if present
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # IMPORTANT: Reset package files to original state
        # The actual version update will be done in the PR workflow
        git checkout package.json package-lock.json
        echo "✅ Package files reset - version update will be done in PR"

    - name: 🌿 Create version bump PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore(release): bump version to ${{ steps.new-version.outputs.version }}
          
          🤖 Automated version bump
          📈 Type: ${{ steps.version-bump-type.outputs.bump_type }}
          🏷️ Version: ${{ steps.new-version.outputs.version }}
          
          [skip ci]
        title: "${{ steps.version-bump-type.outputs.emoji }} chore(release): bump version to ${{ steps.new-version.outputs.version }}"
        body: |
          ## 🤖 Automated Version Bump
          
          ### 📊 Version Information
          - **Current Version**: `$(node -p "require('./package.json').version")`
          - **New Version**: `${{ steps.new-version.outputs.version }}`
          - **Bump Type**: `${{ steps.version-bump-type.outputs.bump_type }}`
          - **Trigger Commit**: `${{ github.event.head_commit.message }}`
          - **Generated**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔄 Changes Made
          - ✅ Updated `package.json` version to `${{ steps.new-version.outputs.version }}`
          - ✅ Tests and linting passed
          
          ### 🚀 What happens after merge:
          1. 🏷️ Git tag `v${{ steps.new-version.outputs.version }}` will be created
          2. 📋 GitHub Release will be published
          3. 🎉 Release notes will be auto-generated
          
          ### 🔍 Commit Analysis
          The version bump type was determined by analyzing the commit message:
          ```
          ${{ github.event.head_commit.message }}
          ```
          
          ---
          
          🤖 **This PR was automatically generated by GitHub Actions**
          
          > **Note**: Merging this PR will trigger the release workflow
        branch: release/v${{ steps.new-version.outputs.version }}
        base: main
        delete-branch: true

    - name: 🎊 Success notification
      run: |
        echo "🎉 SUCCESS! Version bump PR created!"
        echo "📦 New version: ${{ steps.new-version.outputs.version }}"
        echo "📈 Bump type: ${{ steps.version-bump-type.outputs.bump_type }}"
        echo "🌿 PR branch: release/v${{ steps.new-version.outputs.version }}"
        echo "🔗 Check PRs: https://github.com/${{ github.repository }}/pulls"
        echo ""
        echo "� Next steps:"
        echo "1. Review the created PR"
        echo "2. Merge the PR to trigger automatic release creation"
