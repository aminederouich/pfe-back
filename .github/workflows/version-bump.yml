# 🚀 Auto Version Bump & Release
# 
# This workflow automatically bumps version numbers based on conventional commits
# and creates GitHub releases with proper semantic versioning.
# 
# 🔐 IMPORTANT: This workflow requires a Personal Access Token (PAT) with admin 
# privileges to bypass branch protection rules. Add PAT_TOKEN to repository secrets.
# 
# 📋 Repository Setup Required:
# 1. Create a Personal Access Token with 'repo' and 'workflow' permissions
# 2. Add it as PAT_TOKEN in repository secrets
# 3. Ensure the token has admin access to bypass branch protection
#
name: 🚀 Auto Version Bump & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

permissions:
  contents: write
  pull-requests: read

jobs:
  version-bump:
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.head_commit.message, 'chore: bump version')
    runs-on: ubuntu-latest
    
    outputs:
      new_version: ${{ steps.package-version.outputs.new_version }}
      bump_type: ${{ steps.version-type.outputs.bump_type }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.11.0'
        registry-url: 'https://registry.npmjs.org'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🧪 Run tests
      run: npm test
    
    - name: 🔍 Run linting
      run: npm run lint
    
    - name: ⚙️ Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
    
    
    - name: 🔍 Determine version bump type
      id: version-type
      run: |
        # Analyser les commits pour déterminer le type de bump
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Pour les PR, analyser le titre et les commits de la PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          COMMIT_MESSAGES=$(git log --pretty=format:"%s" origin/main..HEAD)
        else
          # Pour les push directs
          COMMIT_MESSAGES=$(git log --pretty=format:"%s" HEAD~1..HEAD)
        fi
        
        echo "Analyzing commit messages:"
        echo "$COMMIT_MESSAGES"
        
        if echo "$COMMIT_MESSAGES" | grep -iE "(breaking change|major:|BREAKING:|feat!|fix!|refactor!)"; then
          echo "🔴 MAJOR version bump detected"
          echo "bump_type=major" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MESSAGES" | grep -iE "(feat:|feature:|minor:)"; then
          echo "🟡 MINOR version bump detected"
          echo "bump_type=minor" >> $GITHUB_OUTPUT
        elif echo "$COMMIT_MESSAGES" | grep -iE "(fix:|bugfix:|patch:|perf:|docs:|style:|refactor:|test:|chore:)"; then
          echo "🟢 PATCH version bump detected"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
        else
          echo "🟢 Default PATCH version bump"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: 📈 Bump version
      run: |
        BUMP_TYPE="${{ steps.version-type.outputs.bump_type }}"
        echo "🚀 Bumping version with type: $BUMP_TYPE"
        
        # Sauvegarder la version actuelle
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "📊 Current version: $CURRENT_VERSION"
        
        # Bump la version
        npm version $BUMP_TYPE --no-git-tag-version
        
        # Afficher la nouvelle version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "✨ New version: $NEW_VERSION"
    
    - name: 📝 Get new version
      id: package-version
      run: |
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "📦 Version set to: $NEW_VERSION"
    
    - name: 🌿 Create version bump branch
      id: bump-branch
      run: |
        NEW_VERSION="${{ steps.package-version.outputs.new_version }}"
        BRANCH_NAME="auto-bump-v$NEW_VERSION"
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        git checkout -b "$BRANCH_NAME"
        echo "✅ Created branch: $BRANCH_NAME"
    
    - name: 💾 Commit version bump
      run: |
        git add package.json
        git commit -m "🔖 chore: bump version to ${{ steps.package-version.outputs.new_version }} [skip ci]
        
        🤖 Auto-generated version bump
        📈 Type: ${{ steps.version-type.outputs.bump_type }}
        🏷️ Version: ${{ steps.package-version.outputs.new_version }}"
    
    - name: 🚀 Push version bump branch
      run: |
        git push origin "${{ steps.bump-branch.outputs.branch_name }}"
        echo "✅ Successfully pushed branch: ${{ steps.bump-branch.outputs.branch_name }}"
    
    - name: 📋 Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        commit-message: "🔖 chore: bump version to ${{ steps.package-version.outputs.new_version }} [skip ci]"
        branch: ${{ steps.bump-branch.outputs.branch_name }}
        base: main
        title: "� chore: bump version to ${{ steps.package-version.outputs.new_version }}"
        body: |
          ## 🤖 Auto version bump
          
          ### � Version Information
          - **Previous Version**: Check package.json history
          - **New Version**: `${{ steps.package-version.outputs.new_version }}`
          - **Bump Type**: `${{ steps.version-type.outputs.bump_type }}`
          - **Generated**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔄 Changes
          - Updated `package.json` version to `${{ steps.package-version.outputs.new_version }}`
          - This PR was automatically generated based on conventional commit analysis
          
          ### 🚀 Next Steps
          1. Review the version bump
          2. Merge this PR to complete the release
          3. A GitHub release will be created automatically after merge
          
          ---
          
          🤖 **Auto-generated by GitHub Actions**
    
    - name: 📋 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package-version.outputs.new_version }}
        release_name: 🚀 Release v${{ steps.package-version.outputs.new_version }}
        body: |
          ## 🎉 Release v${{ steps.package-version.outputs.new_version }}
          
          ### 📊 Release Information
          - **Version Type:** `${{ steps.version-type.outputs.bump_type }}`
          - **Previous Version:** Check the commit history for details
          - **Release Date:** ${{ github.event.head_commit.timestamp }}
          
          ### 🔄 What's Changed
          This release includes all changes merged since the last version.
          
          ### 🤖 Automated Release
          This release was automatically generated by GitHub Actions based on conventional commit messages.
          
          ### 📋 Commit Messages Analyzed
          Recent commits were analyzed to determine the appropriate version bump type.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ steps.package-version.outputs.new_version }}
        draft: false
        prerelease: false
        
    - name: 🎊 Success notification
      run: |
        echo "🎉 SUCCESS! Version bump PR created!"
        echo "📦 New version: ${{ steps.package-version.outputs.new_version }}"
        echo "� Branch: ${{ steps.bump-branch.outputs.branch_name }}"
        echo "🔗 Check PRs: https://github.com/${{ github.repository }}/pulls"

  # Second job: Create release after PR is merged
  create-release:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'chore: bump version')
    needs: version-bump
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
    
    - name: 📝 Get version from package.json
      id: get-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Current version: $VERSION"
    
    - name: ⚙️ Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
    
    - name: 🏷️ Create Git tag
      run: |
        git tag -a "v${{ steps.get-version.outputs.version }}" -m "🚀 Release v${{ steps.get-version.outputs.version }}
        
        📋 Release Notes:
        - Version: ${{ steps.get-version.outputs.version }}
        - Generated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        
        🤖 This release was automatically generated by GitHub Actions"
        git push origin --tags
        echo "✅ Successfully created and pushed tag: v${{ steps.get-version.outputs.version }}"
    
    - name: 📋 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get-version.outputs.version }}
        release_name: 🚀 Release v${{ steps.get-version.outputs.version }}
        body: |
          ## 🎉 Release v${{ steps.get-version.outputs.version }}
          
          ### 📊 Release Information
          - **Version:** `${{ steps.get-version.outputs.version }}`
          - **Release Date:** ${{ github.event.pull_request.merged_at }}
          
          ### 🔄 What's Changed
          This release includes all changes merged since the last version.
          
          ### 🤖 Automated Release
          This release was automatically generated by GitHub Actions after merging the version bump PR.
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/commits/v${{ steps.get-version.outputs.version }}
        draft: false
        prerelease: false
        
    - name: 🎊 Release Success notification
      run: |
        echo "🎉 SUCCESS! Release created!"
        echo "📦 Version: ${{ steps.get-version.outputs.version }}"
        echo "🏷️ Git tag: v${{ steps.get-version.outputs.version }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get-version.outputs.version }}"
