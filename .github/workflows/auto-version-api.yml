name: üöÄ Auto Version After Merge PR (API Version)

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read

jobs:
  auto-version:
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'Merge pull request') && !contains(github.event.head_commit.message, '[skip version]') && !contains(github.event.head_commit.message, 'chore(release)')
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}

    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.11.0'
        registry-url: 'https://registry.npmjs.org'

    - name: üì¶ Install dependencies
      run: npm ci

    - name: üß™ Run tests
      run: npm test

    - name: üîç Run linting
      run: npm run lint

    - name: üîç Analyze merged PR commits
      id: analyze-commits
      run: |
        echo "üîÑ Analyzing merged PR commits..."
        
        # R√©cup√©rer le num√©ro de la PR depuis le message de merge
        PR_NUMBER=$(echo "${{ github.event.head_commit.message }}" | grep -oP 'Merge pull request #\K\d+')
        echo "PR Number: $PR_NUMBER"
        
        if [ -z "$PR_NUMBER" ]; then
          echo "‚ùå Could not extract PR number from merge commit"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=üü¢" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # R√©cup√©rer les commits de la PR
        echo "üìù Fetching commits from PR #$PR_NUMBER..."
        
        # Utiliser l'API GitHub pour r√©cup√©rer les commits de la PR
        PR_COMMITS=$(curl -s -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/commits" | \
          jq -r '.[].commit.message')
        
        echo "Commits from PR:"
        echo "$PR_COMMITS"
        
        # Analyser les commits pour d√©terminer le type de bump
        if echo "$PR_COMMITS" | grep -qE "(^feat(\(.+\))?!:|^fix(\(.+\))?!:|^refactor(\(.+\))?!:|BREAKING CHANGE)"; then
          echo "üî¥ MAJOR version bump detected (breaking changes)"
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "emoji=üî¥" >> $GITHUB_OUTPUT
        elif echo "$PR_COMMITS" | grep -qE "(^feat(\(.+\))?:|feat:)"; then
          echo "üü° MINOR version bump detected (new features)"
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "emoji=üü°" >> $GITHUB_OUTPUT
        elif echo "$PR_COMMITS" | grep -qE "(^fix(\(.+\))?:|^perf(\(.+\))?:|^revert(\(.+\))?:|fix:|perf:)"; then
          echo "üü¢ PATCH version bump detected (bug fixes)"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=üü¢" >> $GITHUB_OUTPUT
        else
          echo "üü¢ Default PATCH version bump (no conventional commits found)"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "emoji=üü¢" >> $GITHUB_OUTPUT
        fi

    - name: üìà Update package version locally
      id: update-version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
        
        echo "Current version: $CURRENT_VERSION"
        echo "Bump type: $BUMP_TYPE"
        
        # Mettre √† jour la version dans package.json et package-lock.json
        npm version $BUMP_TYPE --no-git-tag-version
        
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # V√©rifier que package-lock.json a aussi √©t√© mis √† jour
        LOCK_VERSION=$(node -p "require('./package-lock.json').version")
        echo "Package-lock version: $LOCK_VERSION"
        
        if [ "$NEW_VERSION" != "$LOCK_VERSION" ]; then
          echo "‚ö†Ô∏è Package-lock.json version mismatch, fixing..."
          npm install --package-lock-only
        fi

    - name: üöÄ Commit and push via API (bypass branch protection)
      run: |
        NEW_VERSION="${{ steps.update-version.outputs.version }}"
        BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
        EMOJI="${{ steps.analyze-commits.outputs.emoji }}"
        
        # Configurer Git pour l'API
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Message de commit (√©chapper les caract√®res sp√©ciaux)
        COMMIT_MESSAGE="chore(release): bump version to $NEW_VERSION [skip version]

        Auto-generated version bump
        Type: $BUMP_TYPE
        Version: $NEW_VERSION
        Generated by GitHub Actions"
        
        # Encoder les fichiers en base64 (m√©thode plus s√ªre)
        echo "üìù Encoding files..."
        PACKAGE_JSON_CONTENT=$(cat package.json | base64 -w 0)
        PACKAGE_LOCK_CONTENT=$(cat package-lock.json | base64 -w 0)
        
        # R√©cup√©rer les SHA des fichiers actuels
        echo "üìã Getting current file SHAs..."
        PACKAGE_JSON_SHA=$(curl -s -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/contents/package.json" | jq -r '.sha')
        
        PACKAGE_LOCK_SHA=$(curl -s -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/contents/package-lock.json" | jq -r '.sha')
        
        echo "package.json SHA: $PACKAGE_JSON_SHA"
        echo "package-lock.json SHA: $PACKAGE_LOCK_SHA"
        
        # Cr√©er fichiers temporaires pour √©viter les probl√®mes d'arguments trop longs
        echo "üìù Creating temporary JSON files..."
        
        # JSON pour package.json
        cat > /tmp/package_json_update.json << EOF
{
  "message": "chore(release): bump version to $NEW_VERSION [skip version]",
  "content": "$PACKAGE_JSON_CONTENT",
  "sha": "$PACKAGE_JSON_SHA",
  "branch": "main"
}
EOF
        
        # Mettre √† jour package.json via API
        echo "üìù Updating package.json via API..."
        PACKAGE_JSON_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d @/tmp/package_json_update.json \
          "https://api.github.com/repos/${{ github.repository }}/contents/package.json")
        
        echo "Package.json response: $PACKAGE_JSON_RESPONSE"
        
        # V√©rifier si la mise √† jour a r√©ussi
        if echo "$PACKAGE_JSON_RESPONSE" | jq -e '.commit' > /dev/null; then
          echo "‚úÖ package.json updated successfully"
        else
          echo "‚ùå Failed to update package.json"
          echo "$PACKAGE_JSON_RESPONSE"
          exit 1
        fi
        
        # Attendre un peu pour √©viter les conflits
        sleep 3
        
        # Pour package-lock.json, utilisons une approche diff√©rente si le fichier est trop gros
        LOCK_FILE_SIZE=$(wc -c < package-lock.json)
        echo "package-lock.json size: $LOCK_FILE_SIZE bytes"
        
        if [ "$LOCK_FILE_SIZE" -gt 1000000 ]; then
          echo "‚ö†Ô∏è package-lock.json is too large for API, using git push method..."
          
          # R√©cup√©rer les derniers changements
          git fetch origin main
          git checkout main
          git pull origin main
          
          # R√©g√©n√©rer package-lock.json
          npm install --package-lock-only
          
          # V√©rifier que la version correspond
          LOCK_VERSION=$(node -p "require('./package-lock.json').version")
          if [ "$LOCK_VERSION" != "$NEW_VERSION" ]; then
            echo "ÔøΩ Fixing package-lock.json version..."
            npm version $NEW_VERSION --no-git-tag-version
          fi
          
          # Commiter et pousser avec le token sp√©cial
          git add package-lock.json
          git commit -m "chore(release): update package-lock.json to $NEW_VERSION [skip version]"
          git push https://x-access-token:${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git main
          
        else
          echo "üìù Updating package-lock.json via API..."
          
          # JSON pour package-lock.json
          cat > /tmp/package_lock_update.json << EOF
{
  "message": "chore(release): update package-lock.json to $NEW_VERSION [skip version]",
  "content": "$PACKAGE_LOCK_CONTENT",
  "sha": "$PACKAGE_LOCK_SHA",
  "branch": "main"
}
EOF
          
          PACKAGE_LOCK_RESPONSE=$(curl -s -X PUT \
            -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @/tmp/package_lock_update.json \
            "https://api.github.com/repos/${{ github.repository }}/contents/package-lock.json")
          
          echo "Package-lock.json response: $PACKAGE_LOCK_RESPONSE"
          
          if echo "$PACKAGE_LOCK_RESPONSE" | jq -e '.commit' > /dev/null; then
            echo "‚úÖ package-lock.json updated successfully"
          else
            echo "‚ùå Failed to update package-lock.json"
            echo "$PACKAGE_LOCK_RESPONSE"
          fi
        fi

    - name: üè∑Ô∏è Create Git tag via API
      run: |
        NEW_VERSION="${{ steps.update-version.outputs.version }}"
        BUMP_TYPE="${{ steps.analyze-commits.outputs.bump_type }}"
        EMOJI="${{ steps.analyze-commits.outputs.emoji }}"
        
        # R√©cup√©rer le SHA du dernier commit sur main
        LATEST_COMMIT_SHA=$(curl -s -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/main" | jq -r '.object.sha')
        
        echo "Creating tag v$NEW_VERSION for commit $LATEST_COMMIT_SHA"
        
        # Cr√©er l'objet tag
        curl -X POST \
          -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"tag\": \"v$NEW_VERSION\",
            \"message\": \"Release version $NEW_VERSION\n\n$EMOJI $BUMP_TYPE release\nüè∑Ô∏è Version: $NEW_VERSION\nüóìÔ∏è Date: $(date -u +\"%Y-%m-%d %H:%M:%S UTC\")\nü§ñ Auto-generated by GitHub Actions\",
            \"object\": \"$LATEST_COMMIT_SHA\",
            \"type\": \"commit\"
          }" \
          "https://api.github.com/repos/${{ github.repository }}/git/tags"
        
        # Cr√©er la r√©f√©rence
        curl -X POST \
          -H "Authorization: token ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{
            \"ref\": \"refs/tags/v$NEW_VERSION\",
            \"sha\": \"$LATEST_COMMIT_SHA\"
          }" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs"

    - name: üìã Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.AUTO_VERSION_TOKEN || secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.update-version.outputs.version }}
        release_name: ${{ steps.analyze-commits.outputs.emoji }} Release v${{ steps.update-version.outputs.version }}
        body: |
          ## üöÄ Release v${{ steps.update-version.outputs.version }}
          
          ### üìä Version Information
          - **Version**: `${{ steps.update-version.outputs.version }}`
          - **Type**: `${{ steps.analyze-commits.outputs.bump_type }}` release
          - **Generated**: ${{ github.event.head_commit.timestamp }}
          
          ### üîÑ Triggered by
          Merge commit: `${{ github.event.head_commit.message }}`
          
          ### üìù Changes
          This release was automatically generated after merging a pull request.
          Version was updated in both `package.json` and `package-lock.json`.
          
          See the [full changelog](https://github.com/${{ github.repository }}/compare/v${{ steps.update-version.outputs.version }}...v${{ steps.update-version.outputs.version }}) for details.
          
          ---
          
          ü§ñ **Auto-generated by GitHub Actions via API (bypasses branch protection)**
        draft: false
        prerelease: false

    - name: üéä Success notification
      run: |
        echo "üéâ SUCCESS! Version automatically updated via API!"
        echo "üì¶ New version: ${{ steps.update-version.outputs.version }}"
        echo "üìà Bump type: ${{ steps.analyze-commits.outputs.bump_type }}"
        echo "üè∑Ô∏è Tag created: v${{ steps.update-version.outputs.version }}"
        echo "üìã Release created: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.update-version.outputs.version }}"
        echo ""
        echo "‚úÖ Files updated via GitHub API:"
        echo "  - package.json"
        echo "  - package-lock.json"
        echo ""
        echo "üîó View changes: https://github.com/${{ github.repository }}/commits/main"
